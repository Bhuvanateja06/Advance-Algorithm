#include <iostream>
#include <vector>

using namespace std;

// Structure to represent each non-zero element in the sparse matrix
struct Element {
    int row;
    int col;
    int value;
};

// Sparse Matrix class
class SparseMatrix {
private:
    int numRows;
    int numCols;
    int numNonZero;
    vector<Element> elements; // Vector to store non-zero elements

public:
    // Constructor to initialize the sparse matrix from a 2D array
    SparseMatrix(vector<vector<int>>& matrix) {
        numRows = matrix.size();
        numCols = matrix[0].size();
        numNonZero = 0;

        // Traverse the original matrix and store non-zero elements
        for (int i = 0; i < numRows; ++i) {
            for (int j = 0; j < numCols; ++j) {
                if (matrix[i][j] != 0) {
                    Element elem;
                    elem.row = i;
                    elem.col = j;
                    elem.value = matrix[i][j];
                    elements.push_back(elem);
                    ++numNonZero;
                }
            }
        }
    }

    // Function to display the sparse matrix
    void display() {
        cout << "Sparse Matrix:" << endl;
        for (int i = 0; i < numNonZero; ++i) {
            cout << elements[i].row << " " << elements[i].col << " " << elements[i].value << endl;
        }
    }

    // Getter methods
    int getNumRows() {
        return numRows;
    }

    int getNumCols() {
        return numCols;
    }

    int getNumNonZero() {
        return numNonZero;
    }
};

// Main function to test the SparseMatrix class
int main() {
    // Example usage
    vector<vector<int>> matrix = {
        {0, 0, 3, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 7},
        {0, 2, 0, 0}
    };

    SparseMatrix sparseMatrix(matrix);
    sparseMatrix.display();

    cout << "Number of rows: " << sparseMatrix.getNumRows() << endl;
    cout << "Number of columns: " << sparseMatrix.getNumCols() << endl;
    cout << "Number of non-zero elements: " << sparseMatrix.getNumNonZero() << endl;

    return 0;
}
