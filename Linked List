#include <iostream>
using namespace std;

// Structure to represent each non-zero element in the sparse matrix
struct Node {
    int row;
    int col;
    int value;
    Node* next;
};

// Sparse Matrix class using linked list representation
class SparseMatrix {
private:
    int numRows;
    int numCols;
    Node* head; // Head pointer of the linked list

public:
    // Constructor to initialize the sparse matrix
    SparseMatrix(int rows, int cols) {
        numRows = rows;
        numCols = cols;
        head = nullptr; // Initialize head to nullptr (empty list)
    }

    // Function to insert a non-zero element into the sparse matrix
    void insert(int row, int col, int value) {
        if (row < 0 || row >= numRows || col < 0 || col >= numCols) {
            cout << "Invalid matrix indices!" << endl;
            return;
        }

        Node* newNode = new Node;
        newNode->row = row;
        newNode->col = col;
        newNode->value = value;
        newNode->next = nullptr;

        // Inserting the new node into the linked list
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Function to display the sparse matrix
    void display() {
        cout << "Sparse Matrix:" << endl;
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->row << " " << temp->col << " " << temp->value << endl;
            temp = temp->next;
        }
    }

    // Getter methods
    int getNumRows() {
        return numRows;
    }

    int getNumCols() {
        return numCols;
    }

    // Destructor to free allocated memory
    ~SparseMatrix() {
        Node* temp = head;
        while (head != nullptr) {
            head = head->next;
            delete temp;
            temp = head;
        }
    }
};

// Main function to test the SparseMatrix class
int main() {
    // Example usage
    SparseMatrix sparseMatrix(5, 4);
    sparseMatrix.insert(0, 2, 3);
    sparseMatrix.insert(2, 3, 7);
    sparseMatrix.insert(3, 1, 2);

    sparseMatrix.display();

    cout << "Number of rows: " << sparseMatrix.getNumRows() << endl;
    cout << "Number of columns: " << sparseMatrix.getNumCols() << endl;

    return 0;
}
