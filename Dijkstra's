#include <iostream>

using namespace std;

const int MAX_V = 4; // Maximum number of vertices
const int INF = 1e9; // Infinity value

class Graph {
public:
    int V; // Number of vertices
    int adj[MAX_V][MAX_V]; // Adjacency matrix

    Graph(int V) : V(V) {
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                adj[i][j] = INF;
            }
        }
    }

    // Add an edge to the graph
    void addEdge(int u, int v, int w) {
        adj[u][v] = w;
        adj[v][u] = w; // Uncomment for undirected graph
    }

    // Dijkstra's algorithm to find the shortest path
    void dijkstra(int source, int destination) {
        int distance[MAX_V];
        int parent[MAX_V];
        bool visited[MAX_V] = {false};

        for (int i = 0; i < V; ++i) {
            distance[i] = INF;
            parent[i] = -1;
        }

        distance[source] = 0;

        for (int i = 0; i < V - 1; ++i) {
            int u = -1;

            // Find the vertex with the minimum distance
            for (int v = 0; v < V; ++v) {
                if (!visited[v] && (u == -1 || distance[v] < distance[u])) {
                    u = v;
                }
            }

            visited[u] = true;

            // Update distances and parents of adjacent vertices
            for (int v = 0; v < V; ++v) {
                if (!visited[v] && distance[u] != INF && distance[u] + adj[u][v] < distance[v]) {
                    distance[v] = distance[u] + adj[u][v];
                    parent[v] = u;
                }
            }
        }

        // Print the shortest distance and path from source to destination
        cout << "Shortest distance from " << source << " to " << destination << " is: ";
        if (distance[destination] == INF) {
            cout << "INFINITY";
        } else {
            cout << distance[destination];
        }
        cout << " | Shortest path: ";
        printShortestPath(parent, destination);
        cout << endl;
    }

    void printShortestPath(int parent[], int v) {
        if (v == -1) {
            return;
        }

        int path[MAX_V];
        int pathLength = 0;

        while (v != -1) {
            path[pathLength++] = v;
            v = parent[v];
        }

        for (int i = pathLength - 1; i >= 0; --i) {
            cout << path[i];
            if (i > 0) {
                cout << " -> ";
            }
        }
    }
};

int main() {
    int V = 4; // Number of vertices
    Graph graph(V);

    // Hardcoded edge details for the graph
    graph.addEdge(0, 1, 2);
    graph.addEdge(0, 2, 4);
    graph.addEdge(1, 2, 1);
    graph.addEdge(1, 3, 7);
    graph.addEdge(2, 3, 3);

    int start = 0; // Starting node
    int end = 3; // Ending node

    graph.dijkstra(start, end);

    return 0;
}
