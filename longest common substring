#include <iostream>
#include <vector>
#include <string>

// Function to find the longest common substring
std::string longestCommonSubstring(const std::string& str1, const std::string& str2) {
    int m = str1.length();
    int n = str2.length();

    // Create a 2D lookup table to store lengths of common substrings
    std::vector<std::vector<int>> dp(m + 1, std::vector<int>(n + 1, 0));

    int maxLength = 0;
    int endIndex = 0;

    // Fill the lookup table
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (str1[i - 1] == str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
                if (dp[i][j] > maxLength) {
                    maxLength = dp[i][j];
                    endIndex = i;
                }
            }
        }
    }

    // Extract the longest common substring from the lookup table
    return str1.substr(endIndex - maxLength, maxLength);
}

// Function to print the 2D lookup table
void printLookupTable(const std::vector<std::vector<int>>& dp) {
    for (const auto& row : dp) {
        for (int val : row) {
            std::cout << val << " ";
        }
        std::cout << std::endl;
    }
}

int main() {
    std::string str1 = "ABAB";
    std::string str2 = "BABA";

    std::cout << "Input Strings:" << std::endl;
    std::cout << "String 1: " << str1 << std::endl;
    std::cout << "String 2: " << str2 << std::endl;

    std::vector<std::vector<int>> dp(str1.length() + 1, std::vector<int>(str2.length() + 1, 0));

    std::string lcs = longestCommonSubstring(str1, str2);

    std::cout << "\nLookup Table:" << std::endl;
    printLookupTable(dp);

    std::cout << "\nLongest Common Substring: " << lcs << std::endl;

    return 0;
}
