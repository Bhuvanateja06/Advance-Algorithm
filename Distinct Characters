#include <iostream>
#include <queue>
#include <vector>
#include <unordered_map>
 
using namespace std;
 
struct Node {
   char data;
   int freq;
   Node* left;
   Node* right;
 
   Node(char data, int freq) : data(data), freq(freq), left(nullptr), right(nullptr) {}
};
 
struct Compare {
   bool operator()(Node* a, Node* b) {
       return a->freq > b->freq;
   }
};
 
Node* buildHuffmanTree(string S, vector<int>& f) {
   priority_queue<Node*, vector<Node*>, Compare> minHeap;
 
   for (int i = 0; i < S.length(); ++i) {
       minHeap.push(new Node(S[i], f[i]));
   }
 
 
 
   while (minHeap.size() > 1) {
       Node* left = minHeap.top();
       minHeap.pop();
 
       Node* right = minHeap.top();
       minHeap.pop();
 
       Node* internalNode = new Node('$', left->freq + right->freq);
       internalNode->left = left;
       internalNode->right = right;
 
       minHeap.push(internalNode);
   }
 
   return minHeap.top();
}
 
void printHuffmanCodes(Node* root, string code, unordered_map<char, string>& huffmanCodes) {
   if (root == nullptr) {
       return;
   }
   if (root->data != '$') {
       cout << root->data << ": " << code << endl;
       huffmanCodes[root->data] = code;
   }
 
   printHuffmanCodes(root->left, code + "0", huffmanCodes);
   printHuffmanCodes(root->right, code + "1", huffmanCodes);
}
 
 
int main() {
   string S = "ZXCDES";
   vector<int> f = {2, 3, 2, 5, 6, 3};
 
   Node* root = buildHuffmanTree(S, f);
 
   unordered_map<char, string> huffmanCodes;
   printHuffmanCodes(root, "", huffmanCodes);
 
   return 0;
}
